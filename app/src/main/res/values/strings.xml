<resources>
    <string name="app_name">Listenny</string>
    <string name="menu">Menu</string>
    <string name="explore">Explore</string>
    <string name="favorite">Favorite</string>
    <string name="followed">Followed</string>
    <string name="account">Account</string>
    <string name="playing_artist_name">Artist Name</string>
    <string name="playing_song_name">Song Name Lorem Ipsum</string>
    <string name="recent">Recent</string>
    <string name="description_playing">Top CardView serves as a preview of currently or recently played song whereas after clicking on the picture would appear pause icon and after clicking again on it would play the song again. On the left of the picture there are three icons.First top one:not implemented*/settings; Second middle:*/go to the previous song. Down Left:*/is equaliser icon. To the right of the picture - Top icon love:*/your favorite songs; middle forward icon:*/move to a next song. Down follow icon:*/follow the artist. Under the main big CardView is a name of an artist followed by name of a song. In the middle of names is progress bar of the playing song*. Under that is a list of the recent or related songs to the currently playing one. Whereas on the left is a song related(*) image, middle section are names, on the right - the length of the song.</string>
    <string name="description_playing_functioning">Class for playing is called MediaPlayer. The functionality would be implemented using the MediaController class where SeekBar would be used for showing the progress of played song (possibility of skipping to desired time of the song. For currently playing song would be used the Notification class. PendingIntent class-displaying the title of playing song. Three main steps needs to be done:Create a Controller; Implement Playback Control (happening in Service class and user interface is in Activity class); Handle Navigation back into the app-when user goes away from the app, notification appears displaying a title of the song and by clicking on it the user can go back inside the app. In Service class add imports:import java.util.Random;import android.app.Notification;import android.app.PendingIntent. Shuffle playback is fourth main step.</string>
    <string name="description_menu_one">This layout serves as a menu for the whole app where user can choose from the activities by tapping on the desired icon. Each selected item in action bar is higlighted in purple. Red color for heart is only for design purposes. Top red arrow (expand more) serves as a another activity where user can choose how and who he/she wants to share currently playing or recent song to play to.</string>
    <string name="description_menu_two">CardViews:Recent:by clicking user goes to the recently played or added activity called Playing with layout activity_play.xml. Shares: No implemented activity*/would serves as a list of your last shares and who to. Playlists:*/list of playlists. Network:*/your network of friends, followers and followed. Rooms:*/rooms created by users,e.g. according to mood, artist, anything. Messages:*/list of messages.</string>
    <string name="description_menu_three">Top arrow would appear on all the screens/*. Records:*/top CardView with play and stop and progress items;underneath would be a list of recorded sounds. Equaliser:*/equaliser features.Reason for putting this text in CardView-s is to stick with my idea of the layout and the design.</string>
    <string name="description_menu_four">All the layouts would contain bottom action bar and small card layout with play button and currently or recently played song(this does not appear in main Playing layout. From all the layouts would be possible by clicking on this corner layout to go into Playing activity.</string>
    <string name="description_shares_one">Top arrow (expand less) will transfer you to the menu. As this app is mainly about sharing the music, therefore there is nice welcome message on the top. Under that is a name of a group of CardView-s. First Everyone:not implemented*/would share current song with whole your network. Friend:*/would bring you to the screen with a list of your friends and after tapping on a friend would song be shared. In 1h:*/share this song to friends in 1h.</string>
    <string name="description_shares_three">Email:Open email app with a pre-written message and subject and email address (implicit intent).</string>
    <string name="description_shares_two">Set timer:*/set timer when to send and who to send a song. Birthday:*/ set in setting your friends birthday and than after tapping on this icon would appear a list of friends and current song would be share on the designated day.</string>
    <string name="share_welcome">Hi, Vladi\nshare this song \nwith your friends!</string>
    <string name="play_artist_name">Artist Name</string>
    <string name="play_startingTime">0:42</string>
    <string name="play_timeEnd">2:23</string>
</resources>
